generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum USER_ROLE {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  role          USER_ROLE @default(USER)
  image         String?
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]

  @@map("users")
}

enum PRODUCT_CATEGORY {
  MOBILE_ACCESSORIES
  ELECTRONICS
  FITNESS
  AMAZON_SUPER_PRODUCTS
}

model Product {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  affiliateLink String
  price         String
  rating        String
  description   String
  salePrice     String?
  isArchieved   Boolean          @default(false)
  isFeatured    Boolean          @default(false)
  category      PRODUCT_CATEGORY
  clicks        BigInt           @default(0)
  tags          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images ProductImage[]

  @@map("products")
}

model ProductImage {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String
  key  String @unique

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}
